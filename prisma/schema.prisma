// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId   String  @unique
  email     String  @unique
  firstname String? @unique
  lastname  String? @unique

  subscription Subscription?
  integrations Integration[]
  automations  Automation[]
}

model Subscription {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.Uuid

  plan       SUBSCRIPTION_PLAN @default(FREE)
  customerId String?           @unique
}

model Automation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String  @default("Untitled")
  active Boolean @default(false)

  trigger   Trigger[]
  listeners Listener?
  posts     Post[]
  dms       Dms[]
  keywords  Keyword[]

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid
}

model Integration {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name INTEGRATION @default(INSTAGRAM)

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid

  token       String    @unique
  instagramId String?   @unique
  expiresAt   DateTime?
}

model Dms {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId String?
  receiver String?
  message  String?

  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid
}

model Post {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  media String
  caption String?
  mediaType MEDIA_TYPE @default(IMAGE)

  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid
}

model Listener {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @unique @db.Uuid

  prompt String
  commentReply String?
  dmCount Int @default(0)
  commentCount Int @default(0)
  listener LISTENER @default(MESSAGE)
}

model Trigger {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type TRIGGER @default(COMMENT)

  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid
}

model Keyword {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  word String

  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid
}

enum INTEGRATION {
  INSTAGRAM
}

enum SUBSCRIPTION_PLAN {
  FREE
  PRO
}

enum MEDIA_TYPE {
  IMAGE
  VIDEO
  CAROUSEL_ALBUM
}

enum LISTENER {
  SMARTAI
  MESSAGE
}

enum TRIGGER {
  COMMENT
  DM
}